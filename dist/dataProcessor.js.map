{"version":3,"sources":["../src/dataProcessor.js"],"names":["functions","scale","offset","delta","fluctuation","factor","datapoints","_","map","point","i","length","newSeries","deltaValue","push","flucValue","aaFunctions"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAIA,SAAS,GAAG;AACd;AACAC,EAAAA,KAAK,EAAEA,KAFO;AAGdC,EAAAA,MAAM,EAAEA,MAHM;AAIdC,EAAAA,KAAK,EAAEA,KAJO;AAKdC,EAAAA,WAAW,EAAEA;AALC,CAAhB;;AAQA,SAASH,KAAT,CAAeI,MAAf,EAAuBC,UAAvB,EAAmC;AACjC,SAAOC,mBAAEC,GAAF,CAAMF,UAAN,EAAkB,UAAAG,KAAK,EAAI;AAChC,WAAO,CAAEA,KAAK,CAAC,CAAD,CAAL,GAAWJ,MAAb,EAAqBI,KAAK,CAAC,CAAD,CAA1B,CAAP;AACD,GAFM,CAAP;AAGD;;AAED,SAASP,MAAT,CAAgBC,KAAhB,EAAuBG,UAAvB,EAAmC;AACjC,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACK,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CJ,IAAAA,UAAU,CAACI,CAAD,CAAV,GAAgB,CACdJ,UAAU,CAACI,CAAD,CAAV,CAAc,CAAd,IAAmBP,KADL,EAEdG,UAAU,CAACI,CAAD,CAAV,CAAc,CAAd,CAFc,CAAhB;AAID;;AAED,SAAOJ,UAAP;AACD;;AAED,SAASH,KAAT,CAAeG,UAAf,EAA2B;AACzB,MAAIM,SAAS,GAAG,EAAhB;AACA,MAAIC,UAAJ;;AACA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACK,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CG,IAAAA,UAAU,GAAGP,UAAU,CAACI,CAAD,CAAV,CAAc,CAAd,IAAmBJ,UAAU,CAACI,CAAC,GAAG,CAAL,CAAV,CAAkB,CAAlB,CAAhC;AACAE,IAAAA,SAAS,CAACE,IAAV,CAAe,CAACD,UAAD,EAAaP,UAAU,CAACI,CAAD,CAAV,CAAc,CAAd,CAAb,CAAf;AACD;;AACD,SAAOE,SAAP;AACD;;AAED,SAASR,WAAT,CAAqBE,UAArB,EAAiC;AAC/B,MAAIM,SAAS,GAAG,EAAhB;AACA,MAAIG,SAAJ;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACK,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CK,IAAAA,SAAS,GAAGT,UAAU,CAACI,CAAD,CAAV,CAAc,CAAd,IAAmBJ,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,CAA/B;AACAM,IAAAA,SAAS,CAACE,IAAV,CAAe,CAACC,SAAD,EAAYT,UAAU,CAACI,CAAD,CAAV,CAAc,CAAd,CAAZ,CAAf;AACD;;AACD,SAAOE,SAAP;AACD;;eAEc;AACb,MAAII,WAAJ,GAAkB;AAChB,WAAOhB,SAAP;AACD;;AAHY,C","sourcesContent":["import _ from 'lodash';\n\nlet functions = {\n  // Transform\n  scale: scale,\n  offset: offset,\n  delta: delta,\n  fluctuation: fluctuation\n};\n\nfunction scale(factor, datapoints) {\n  return _.map(datapoints, point => {\n    return [ point[0] * factor, point[1] ];\n  });\n}\n\nfunction offset(delta, datapoints) {\n  for (let i = 0; i < datapoints.length; i++) {\n    datapoints[i] = [\n      datapoints[i][0] + delta,\n      datapoints[i][1]\n    ];\n  }\n\n  return datapoints;\n}\n\nfunction delta(datapoints) {\n  let newSeries = [];\n  let deltaValue;\n  for (var i = 1; i < datapoints.length; i++) {\n    deltaValue = datapoints[i][0] - datapoints[i - 1][0];\n    newSeries.push([deltaValue, datapoints[i][1]]);\n  }\n  return newSeries;\n}\n\nfunction fluctuation(datapoints) {\n  let newSeries = [];\n  let flucValue;\n  for (var i = 0; i < datapoints.length; i++) {\n    flucValue = datapoints[i][0] - datapoints[0][0];\n    newSeries.push([flucValue, datapoints[i][1]]);\n  }\n  return newSeries;\n}\n\nexport default {\n  get aaFunctions() {\n    return functions;\n  }\n};\n"],"file":"dataProcessor.js"}