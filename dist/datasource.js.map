{"version":3,"sources":["../src/datasource.js"],"names":["ArchiverapplianceDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","jsonData","operatorList","options","query","buildQueryParameters","targets","_","filter","t","hide","when","data","map","target","targetProcess","all","then","postProcess","buildUrls","urls","doMultiUrlRequests","responses","responseParse","setAlias","applyFunctions","d","flatten","pvnames_promise","regex","PVNamesFindQuery","pvnames","defer","resolve","promise","deferred","pvname","buildUrl","operator","interval","from","to","e","reject","pv","includes","undefined","Error","toISOString","requests","doRequest","method","target_data","response","td","target_res","timesiries","datapoint","val","secs","floor","nanos","meta","alias","pattern","alias_pattern","RegExp","forEach","replace","functions","transformFunctions","bindFunctionDefs","timeseries","datapoints","sequence","status","message","title","str","encodeURIComponent","res","result","datasourceRequest","Date","range","range_msec","getTime","interval_sec","maxDataPoints","String","scopedVars","refId","functionDefs","category","aggregationFunctions","aafunc","getCategories","aggFuncDefs","func","def","funcInstance","createFuncInstance","params","bindFunction","dataProcessor","aaFunctions","funcsArray","i","call"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport dataProcessor from \"./dataProcessor\";\nimport * as aafunc from './aafunc';\n\nexport class ArchiverapplianceDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    const jsonData = instanceSettings.jsonData || {};\n\n    this.operatorList = [\"firstSample\", \"lastSample\", \"firstFill\", \"lastFill\", \"mean\", \"min\", \"max\",\n        \"count\", \"ncount\", \"nth\", \"median\", \"std\", \"jitter\", \"ignoreflyers\", \"flyers\", \"variance\",\n        \"popvariance\", \"kurtosis\", \"skewness\", \"raw\"];\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = _.filter(query.targets, t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const targets = _.map( query.targets, target => {\n      return this.targetProcess(target, options);\n    });\n\n   return this.q.all(targets).then( data => this.postProcess(data) );\n  }\n\n  targetProcess(target, options) {\n      return (\n          this.buildUrls(target, options)\n          .then( urls => this.doMultiUrlRequests(urls) )\n          .then( responses => this.responseParse(responses) )\n          .then( data => this.setAlias(data, target) )\n          .then( data => this.applyFunctions(data, target) )\n      );\n  }\n\n  postProcess(data) {\n    const d = _.flatten( data );\n\n    return {data: d};\n  }\n\n  buildUrls(target) {\n    let pvnames_promise;\n    if (target.regex) {\n      pvnames_promise = this.PVNamesFindQuery(target.target);\n    } else {\n      let pvnames = this.q.defer();\n      pvnames.resolve([target.target]);\n      pvnames_promise = pvnames.promise;\n    }\n\n    return pvnames_promise.then( pvnames => {\n      let deferred = this.q.defer();\n      let urls;\n      try {\n        urls = _.map( pvnames, pvname => {\n          return this.buildUrl(pvname, target.operator, target.interval, target.from, target.to);\n        });\n      } catch (e) {\n        deferred.reject(e);\n      }\n      deferred.resolve(urls);\n      return deferred.promise;\n    });\n  }\n\n  buildUrl(pvname, operator, interval, from, to) {\n    let pv = \"\"\n    if ( operator === \"raw\" || interval === \"\") {\n      pv = \"pv=\" + pvname;\n    } else if ( _.includes([\"\", undefined], operator) ) {\n      // Default Operator\n      pv = \"pv=mean_\" + interval + \"(\" + pvname + \")\";\n    } else if ( _.includes(this.operatorList, operator) ) {\n      pv = \"pv=\" + operator + \"_\" + interval + \"(\" + pvname + \")\";\n    } else {\n      throw new Error(\"Data Processing Operator is invalid.\");\n    }\n\n    const url = this.url + '/data/getData.json?' + pv + '&from=' + from.toISOString() + '&to=' + to.toISOString();\n\n    return url;\n  }\n\n  doMultiUrlRequests(urls) {\n    const requests = _.map( urls, url => {\n      return this.doRequest({ url: url, method: \"GET\" });\n    });\n\n    return this.q.all(requests);\n  }\n\n  responseParse(responses) {\n    let deferred = this.q.defer();\n\n    const target_data = _.map( responses, response => {\n      const td = _.map( response.data, target_res => {\n        const timesiries = _.map( target_res.data, datapoint => {\n            return [datapoint.val, datapoint.secs*1000+_.floor(datapoint.nanos/1000000)];\n        });\n        const target_data = {\"target\": target_res.meta[\"name\"], \"datapoints\": timesiries};\n        return target_data;\n      });\n      return td;\n    });\n\n    deferred.resolve(_.flatten(target_data));\n    return deferred.promise;\n  }\n\n  setAlias(data, target) {\n    let deferred = this.q.defer();\n\n    if( !target.alias ) {\n      deferred.resolve(data);\n      return deferred.promise;\n    }\n\n    let pattern;\n    if (target.alias_pattern) {\n      pattern = new RegExp(target.alias_pattern, \"\");\n    }\n\n    _.forEach( data, d => {\n      if ( pattern ) {\n        d.target = d.target.replace(pattern, target.alias);\n      } else {\n        d.target = target.alias;\n      }\n    });\n\n    deferred.resolve(data);\n    return deferred.promise;\n  }\n\n  applyFunctions(data, target) {\n    let deferred = this.q.defer();\n\n    if(target.functions === undefined){\n      deferred.resolve(data);\n      return deferred.promise;\n    }\n\n    // Apply transformation functions\n    const transformFunctions = bindFunctionDefs(target.functions, 'Transform');\n    data = _.map(data, timeseries => {\n      timeseries.datapoints = sequence(transformFunctions)(timeseries.datapoints);\n      return timeseries;\n    });\n\n    deferred.resolve(data);\n    return deferred.promise;\n  }\n\n  testDatasource() {\n    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //return this.doRequest({\n    //  url: this.url_mgmt + '/bpl/getAppliancesInCluster',\n    //  method: 'GET',\n    //}).then(response => {\n    //  if (response.status === 200) {\n    //    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //  }\n    //});\n  }\n\n  PVNamesFindQuery(query) {\n    const str = this.templateSrv.replace(query, null, 'regex');\n\n    if(!str) {\n        let deferred = this.q.defer();\n        deferred.resolve([]);\n        return deferred.promise;\n    }\n\n    const url = this.url + \"/bpl/getMatchingPVs?limit=100&regex=\" + encodeURIComponent(str);\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then( res => {\n        return res.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    return this.PVNamesFindQuery(query).then( pvnames => {\n      return _.map(pvnames, pvname => {\n        return {\"text\": pvname};\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(options);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets and undefined targets\n    options.targets = _.filter(options.targets, target => {\n      return (target.target !== '' && typeof target.target !== 'undefined');\n    });\n\n    if (options.targets.length <= 0) {\n      return options;\n    }\n\n    const from = new Date(options.range.from);\n    const to = new Date(options.range.to);\n    const range_msec = to.getTime() - from.getTime();\n    const interval_sec =  _.floor(range_msec / ( options.maxDataPoints * 1000));\n\n    let interval = \"\";\n    if ( interval_sec >= 1 ) {\n        interval = String(interval_sec);\n    }\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: target.alias,\n        operator: target.operator,\n        from: from,\n        to: to,\n        interval: interval,\n        functions: target.functions,\n        regex: target.regex,\n        alias_pattern: target.alias_pattern\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n\nfunction bindFunctionDefs(functionDefs, category) {\n  var aggregationFunctions = _.map(aafunc.getCategories()[category], 'name');\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.includes(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, func => {\n    let funcInstance = aafunc.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(dataProcessor.aaFunctions);\n  });\n}\n\nfunction sequence(funcsArray) {\n  return function(result) {\n      for (let i = 0; i < funcsArray.length; i++) {\n          result = funcsArray[i].call(this, result);\n      }\n      return result;\n  };\n}\n"],"file":"datasource.js"}