{"version":3,"sources":["../src/datasource.js"],"names":["_","ArchiverapplianceDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","jsonData","url_mgmt","operatorList","options","query","buildQueryParameters","targets","filter","t","hide","when","data","urls","buildUrl","requests","map","doRequest","method","all","then","responseParse","res","interval","intervalMs","String","pvs","reduce","target","undefined","includes","operator","push","from","Date","range","to","pv","toISOString","responses","response","targets_data","timesiries","target_res","datapoint","val","secs","Math","floor","nanos","target_data","meta","concat","setAlias","aliases","forEach","alias","d","status","message","title","str","replace","s","toString","split","interpolated","mapToTextValue","result","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;6CAEMC,2B;AAEX,6CAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKK,eAAL,GAAuBR,iBAAiBQ,eAAxC;AACA,eAAKC,OAAL,GAAe,EAAC,gBAAgB,kBAAjB,EAAf;AACA,cAAI,OAAOT,iBAAiBU,SAAxB,KAAsC,QAAtC,IAAkDV,iBAAiBU,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AAC3F,iBAAKF,OAAL,CAAa,eAAb,IAAgCT,iBAAiBU,SAAjD;AACD;;AAED,cAAME,WAAWZ,iBAAiBY,QAAjB,IAA6B,EAA9C;;AAEA,eAAKC,QAAL,GAAgBb,iBAAiBY,QAAjB,CAA0BC,QAA1C;AACA,eAAKC,YAAL,GAAoB,CAAE,aAAF,EAAiB,YAAjB,EAA+B,WAA/B,EAA4C,UAA5C,EAAwD,MAAxD,EAAgE,KAAhE,EAAuE,KAAvE,EAChB,OADgB,EACP,QADO,EACG,KADH,EACU,QADV,EACoB,KADpB,EAC2B,QAD3B,EACqC,cADrC,EACqD,QADrD,EAC+D,UAD/D,EAEhB,aAFgB,EAED,UAFC,EAEW,UAFX,EAEuB,KAFvB,CAApB;AAGD;;;;gCAEKC,O,EAAS;AAAA;;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAEA,gBAAIL,MAAME,OAAN,CAAcP,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKJ,CAAL,CAAOe,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,gBAAMC,OAAO,KAAKC,QAAL,CAAcT,KAAd,EAAqBD,OAArB,CAAb;;AAEA,gBAAMW,WAAWF,KAAKG,GAAL,CAAU,eAAO;AAChC,qBAAO,MAAKC,SAAL,CAAe;AACpBvB,qBAAKA,GADe;AAEpBkB,sBAAMP,KAFc;AAGpBa,wBAAQ;AAHY,eAAf,CAAP;AAKD,aANgB,CAAjB;;AAQD,mBAAO,KAAKtB,CAAL,CAAOuB,GAAP,CAAWJ,QAAX,EACCK,IADD,CACO;AAAA,qBAAO,MAAKC,aAAL,CAAmBC,GAAnB,EAAwBjB,KAAxB,CAAP;AAAA,aADP,CAAP;AAEA;;;mCAEQA,K,EAAOD,O,EAAS;AAAA;;AACvB,gBAAImB,WAAW,EAAf;AACA,gBAAKnB,QAAQoB,UAAR,GAAqB,IAA1B,EAAiC;AAC/BD,yBAAWE,OAAOrB,QAAQoB,UAAR,GAAqB,IAArB,GAA4B,CAAnC,CAAX;AACD;;AAED,gBAAME,MAAMrB,MAAME,OAAN,CAAcoB,MAAd,CAAsB,UAACD,GAAD,EAAME,MAAN,EAAiB;AACjD,kBAAK,CAAC,KAAD,EAAQ,EAAR,EAAYC,SAAZ,EAAuBC,QAAvB,CAAgCF,OAAOG,QAAvC,KAAoDR,aAAa,EAAtE,EAA0E;AACxEG,oBAAIM,IAAJ,CAAS,QAAQJ,OAAOA,MAAxB;AACD,eAFD,MAEO,IAAK,OAAKzB,YAAL,CAAkB2B,QAAlB,CAA2BF,OAAOG,QAAlC,CAAL,EAAmD;AACxDL,oBAAIM,IAAJ,CAAS,QAAQJ,OAAOG,QAAf,GAA0B,GAA1B,GAAgCR,QAAhC,GAA2C,GAA3C,GAAiDK,OAAOA,MAAxD,GAAiE,GAA1E;AACD;AACD,qBAAOF,GAAP;AACD,aAPW,EAOT,EAPS,CAAZ;;AASA,gBAAMO,OAAO,IAAIC,IAAJ,CAAS9B,QAAQ+B,KAAR,CAAcF,IAAvB,CAAb;AACA,gBAAMG,KAAK,IAAIF,IAAJ,CAAS9B,QAAQ+B,KAAR,CAAcC,EAAvB,CAAX;AACA,gBAAMvB,OAAOa,IAAIV,GAAJ,CAAS,cAAM;AAC1B,qBAAO,OAAKtB,GAAL,GAAW,qBAAX,GAAmC2C,EAAnC,GAAwC,QAAxC,GAAmDJ,KAAKK,WAAL,EAAnD,GAAwE,MAAxE,GAAiFF,GAAGE,WAAH,EAAxF;AACD,aAFY,CAAb;;AAIA,mBAAOzB,IAAP;AACD;;;wCAEa0B,S,EAAWlC,K,EAAO;AAC9B,gBAAIO,OAAO2B,UAAUZ,MAAV,CAAkB,UAACf,IAAD,EAAO4B,QAAP,EAAoB;AAC/C,kBAAIC,eAAeD,SAAS5B,IAAT,CAAcI,GAAd,CAAmB,sBAAc;AAChD,oBAAM0B,aAAaC,WAAW/B,IAAX,CAAgBI,GAAhB,CAAqB,qBAAa;AACjD,yBAAO,CAAC4B,UAAUC,GAAX,EAAgBD,UAAUE,IAAV,GAAe,IAAf,GAAoBC,KAAKC,KAAL,CAAWJ,UAAUK,KAAV,GAAgB,OAA3B,CAApC,CAAP;AACH,iBAFkB,CAAnB;AAGA,oBAAMC,cAAc,EAAC,UAAUP,WAAWQ,IAAX,CAAgB,MAAhB,CAAX,EAAoC,cAAcT,UAAlD,EAApB;AACA,uBAAOQ,WAAP;AACH,eANkB,CAAnB;AAOAtC,qBAAOA,KAAKwC,MAAL,CAAYX,YAAZ,CAAP;AACA,qBAAO7B,IAAP;AACD,aAVU,EAUR,EAVQ,CAAX;;AAYA,iBAAKyC,QAAL,CAAczC,IAAd,EAAoBP,MAAME,OAA1B;;AAEA,mBAAO,EAACK,MAAMA,IAAP,EAAP;AACD;;;mCAEQA,I,EAAML,O,EAAS;AACpB,gBAAI+C,UAAU,EAAd;;AAEA/C,oBAAQgD,OAAR,CAAiB,kBAAU;AACzB,kBAAI3B,OAAO4B,KAAP,KAAiB3B,SAAjB,IAA8BD,OAAO4B,KAAP,KAAiB,EAAnD,EAAwD;AACtDF,wBAAQ1B,OAAOA,MAAf,IAAyBA,OAAO4B,KAAhC;AACD;AACF,aAJD;;AAMA5C,iBAAK2C,OAAL,CAAc,aAAK;AACjB,kBAAID,QAAQG,EAAE7B,MAAV,MAAsBC,SAA1B,EAAsC;AACpC4B,kBAAE7B,MAAF,GAAW0B,QAAQG,EAAE7B,MAAV,CAAX;AACD;AACF,aAJD;AAKH;;;2CAEgB;AACf,mBAAO,EAAE8B,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;0CAEevD,K,EAAO;AACrB,gBAAIwD,MAAM,KAAKrE,WAAL,CAAiBsE,OAAjB,CAAyBzD,KAAzB,EAAgC,IAAhC,EAAsC,OAAtC,CAAV;;AAEA,gBAAIwD,GAAJ,EAAS;AACP,kBAAIE,IAAIF,IAAIG,QAAJ,GAAeC,KAAf,CAAqB,GAArB,CAAR;AACA,kBAAIrC,SAAUmC,EAAE,CAAF,KAAQ,EAAtB;AACA,kBAAIpE,OAAQoE,EAAE,CAAF,KAAQ,EAApB;AACD,aAJD,MAKI;AACF,kBAAInC,SAAS,EAAb;AACA,kBAAIjC,OAAO,EAAX;AACD;;AAED,gBAAIuE,eAAe;AACftC,sBAAQA;AADO,aAAnB;;AAIAsC,yBAAavE,IAAb,GAAoBA,IAApB;;AAEA,mBAAO,KAAKsB,SAAL,CAAe;AACpBvB,mBAAK,KAAKA,GAAL,GAAW,SADI;AAEpBkB,oBAAMsD,YAFc;AAGpBhD,sBAAQ;AAHY,aAAf,EAIJE,IAJI,CAIC,KAAK+C,cAJN,CAAP;AAKD;;;yCAEcC,M,EAAQ;AACrB,mBAAOjF,EAAE6B,GAAF,CAAMoD,OAAOxD,IAAb,EAAmB,UAAC6C,CAAD,EAAIY,CAAJ,EAAU;AAClC,kBAAIZ,KAAKA,EAAEa,IAAP,IAAeb,EAAEc,KAArB,EAA4B;AAC1B,uBAAO,EAAED,MAAMb,EAAEa,IAAV,EAAgBC,OAAOd,EAAEc,KAAzB,EAAP;AACD,eAFD,MAEO,IAAIpF,EAAEqF,QAAF,CAAWf,CAAX,CAAJ,EAAmB;AACxB,uBAAO,EAAEa,MAAMb,CAAR,EAAWc,OAAOF,CAAlB,EAAP;AACD;AACD,qBAAO,EAAEC,MAAMb,CAAR,EAAWc,OAAOd,CAAlB,EAAP;AACD,aAPM,CAAP;AAQD;;;oCAESrD,O,EAAS;AACjBA,oBAAQP,eAAR,GAA0B,KAAKA,eAA/B;AACAO,oBAAQN,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,gBAAMsE,SAAS,KAAK7E,UAAL,CAAgBkF,iBAAhB,CAAkCrE,OAAlC,CAAf;AACA,mBAAOgE,MAAP;AACD;;;+CAEoBhE,O,EAAS;AAAA;;AAC5B;AACAA,oBAAQG,OAAR,GAAkBpB,EAAEqB,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,qBAAQqB,OAAOA,MAAP,KAAkB,EAAlB,IAAwB,OAAOA,OAAOA,MAAd,KAAyB,WAAzD;AACD,aAFiB,CAAlB;;AAIA,gBAAIrB,UAAUpB,EAAE6B,GAAF,CAAMZ,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,qBAAO;AACLqB,wBAAQ,OAAKpC,WAAL,CAAiBsE,OAAjB,CAAyBlC,OAAOA,MAAhC,EAAwCxB,QAAQsE,UAAhD,EAA4D,OAA5D,CADH;AAELC,uBAAO/C,OAAO+C,KAFT;AAGLjE,sBAAMkB,OAAOlB,IAHR;AAIL8C,uBAAO5B,OAAO4B,KAJT;AAKLzB,0BAAUH,OAAOG;AALZ,eAAP;AAOD,aARa,CAAd;;AAUA3B,oBAAQG,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOH,OAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class ArchiverapplianceDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    const jsonData = instanceSettings.jsonData || {};\n\n    this.url_mgmt = instanceSettings.jsonData.url_mgmt;\n    this.operatorList = [ \"firstSample\", \"lastSample\", \"firstFill\", \"lastFill\", \"mean\", \"min\", \"max\",\n        \"count\", \"ncount\", \"nth\", \"median\", \"std\", \"jitter\", \"ignoreflyers\", \"flyers\", \"variance\",\n        \"popvariance\", \"kurtosis\", \"skewness\", \"raw\"];\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const urls = this.buildUrl(query, options);\n\n    const requests = urls.map( url => {\n      return this.doRequest({\n        url: url,\n        data: query,\n        method: 'GET'\n      })\n    });\n\n   return this.q.all(requests)\n          .then( res => this.responseParse(res, query) );\n  }\n\n  buildUrl(query, options) {\n    let interval = \"\";\n    if ( options.intervalMs > 1000 ) {\n      interval = String(options.intervalMs / 1000 - 1);\n    }\n\n    const pvs = query.targets.reduce( (pvs, target) => {\n      if ( [\"raw\", \"\", undefined].includes(target.operator) || interval === \"\") {\n        pvs.push(\"pv=\" + target.target);\n      } else if ( this.operatorList.includes(target.operator) ) {\n        pvs.push(\"pv=\" + target.operator + \"_\" + interval + \"(\" + target.target + \")\");\n      }\n      return pvs;\n    }, []);\n\n    const from = new Date(options.range.from);\n    const to = new Date(options.range.to);\n    const urls = pvs.map( pv => {\n      return this.url + '/data/getData.json?' + pv + '&from=' + from.toISOString() + '&to=' + to.toISOString();\n    });\n\n    return urls;\n  }\n\n  responseParse(responses, query) {\n    let data = responses.reduce( (data, response) => {\n      let targets_data = response.data.map( target_res => {\n          const timesiries = target_res.data.map( datapoint => {\n              return [datapoint.val, datapoint.secs*1000+Math.floor(datapoint.nanos/1000000)];\n          });\n          const target_data = {\"target\": target_res.meta[\"name\"], \"datapoints\": timesiries};\n          return target_data;\n      });\n      data = data.concat(targets_data);\n      return data;\n    }, []);\n\n    this.setAlias(data, query.targets);\n\n    return {data: data};\n  }\n\n  setAlias(data, targets) {\n      let aliases = {};\n\n      targets.forEach( target => {\n        if( target.alias !== undefined && target.alias !== \"\" ) {\n          aliases[target.target] = target.alias;\n        }\n      });\n\n      data.forEach( d => {\n        if( aliases[d.target] !== undefined ) {\n          d.target = aliases[d.target];\n        }\n      });\n  }\n\n  testDatasource() {\n    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //return this.doRequest({\n    //  url: this.url_mgmt + '/bpl/getAppliancesInCluster',\n    //  method: 'GET',\n    //}).then(response => {\n    //  if (response.status === 200) {\n    //    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //  }\n    //});\n  }\n\n  metricFindQuery(query) {\n    var str = this.templateSrv.replace(query, null, 'regex');\n\n    if (str) {\n      var s = str.toString().split('=');\n      var target = (s[1] || '');\n      var name = (s[0] || '');\n    }\n    else{\n      var target = '';\n      var name = '';\n    }\n\n    var interpolated = {\n        target: target\n    };\n\n    interpolated.name = name;\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(options);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets and undefined targets\n    options.targets = _.filter(options.targets, target => {\n      return (target.target !== '' && typeof target.target !== 'undefined');\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: target.alias,\n        operator: target.operator,\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}