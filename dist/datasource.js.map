{"version":3,"sources":["../src/datasource.js"],"names":["ArchiverapplianceDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","operatorList","options","query","buildQueryParameters","targets","_","filter","t","hide","when","data","targetProcesses","map","target","targetProcess","all","then","timeseriesDataArray","postProcess","buildUrls","urls","doMultiUrlRequests","responses","responseParse","timeseriesData","setAlias","applyFunctions","flatten","targetQueries","parseTargetQuery","pvnamesPromise","targetQuery","regex","pvNamesFindQuery","pvnamesArray","pvnames","slice","uniq","deferred","defer","pvname","buildUrl","operator","interval","from","to","e","reject","resolve","promise","pv","includes","undefined","Error","toISOString","requests","doRequest","method","timeSeriesDataArray","response","timeSeriesData","target_res","timesiries","datapoint","val","secs","floor","nanos","timeseries","meta","datapoints","alias","pattern","aliasPattern","RegExp","newTimeseriesData","replace","functions","bindFunctionDefs","status","message","title","encodeURIComponent","res","replacedQuery","parsedQuery","text","result","datasourceRequest","Date","range","rangeMsec","getTime","intervalSec","maxDataPoints","String","scopedVars","refId","splitQueries","split","queries","forEach","splitQuery","i","orElems","trim","newQueries","orElem","functionDefs","categories","allCategorisedFuncDefs","aafunc","getCategories","requiredCategoryFuncNames","reduce","funcNames","category","concat","applyFuncDefs","func","def","promises","prevPromise","funcInstance","createFuncInstance","params","bindedFunc","bindFunction","dataProcessor","aaFunctions","tsData"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport dataProcessor from './dataProcessor';\nimport * as aafunc from './aafunc';\n\nexport class ArchiverapplianceDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (\n        typeof instanceSettings.basicAuth === 'string'\n        && instanceSettings.basicAuth.length > 0\n    ) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    this.operatorList = [\n        'firstSample', 'lastSample', 'firstFill', 'lastFill', 'mean', 'min',\n        'max', 'count', 'ncount', 'nth', 'median', 'std', 'jitter',\n        'ignoreflyers', 'flyers', 'variance',\n        'popvariance', 'kurtosis', 'skewness', 'raw'\n    ];\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = _.filter(query.targets, t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    const targetProcesses = _.map(query.targets, (target) => {\n      return this.targetProcess(target, options);\n    });\n\n   return this.q.all(targetProcesses)\n          .then((timeseriesDataArray) => this.postProcess(timeseriesDataArray));\n  }\n\n  targetProcess(target, options) {\n    return (\n      this.buildUrls(target, options)\n      .then(urls           => this.doMultiUrlRequests(urls))\n      .then(responses      => this.responseParse(responses))\n      .then(timeseriesData => this.setAlias(timeseriesData, target))\n      .then(timeseriesData => this.applyFunctions(timeseriesData, target))\n    );\n  }\n\n  postProcess(timeseriesDataArray) {\n    const timeseriesData = _.flatten(timeseriesDataArray);\n\n    return { data: timeseriesData };\n  }\n\n  buildUrls(target) {\n    const targetQueries = this.parseTargetQuery(target.target);\n\n    const pvnamesPromise = _.map(targetQueries, (targetQuery) => {\n      if (target.regex) {\n        return this.pvNamesFindQuery(targetQuery);\n      }\n\n      return this.q.when([targetQuery]);\n    });\n\n    return this.q.all(pvnamesPromise)\n          .then((pvnamesArray) => {\n            const pvnames = _.slice(_.uniq(_.flatten(pvnamesArray)), 0, 100);\n            let deferred = this.q.defer();\n            let urls;\n\n            try {\n              urls = _.map( pvnames, (pvname) => {\n                return this.buildUrl(\n                  pvname,\n                  target.operator,\n                  target.interval,\n                  target.from,\n                  target.to\n                );\n              });\n            } catch (e) {\n              deferred.reject(e);\n            }\n\n            deferred.resolve(urls);\n            return deferred.promise;\n          });\n  }\n\n  buildUrl(pvname, operator, interval, from, to) {\n    let pv = ''\n    if (operator === 'raw' || interval === '') {\n      pv = `pv=${pvname}`;\n    } else if (_.includes(['', undefined], operator)) {\n      // Default Operator\n      pv = `pv=mean_${interval}(${pvname})`;\n    } else if (_.includes(this.operatorList, operator) ) {\n      pv = `pv=${operator}_${interval}(${pvname})`;\n    } else {\n      throw new Error('Data Processing Operator is invalid.');\n    }\n\n    const url = `${this.url}/data/getData.json?${pv}&from=${from.toISOString()}&to=${to.toISOString()}`;\n\n    return url;\n  }\n\n  doMultiUrlRequests(urls) {\n    const requests = _.map(urls, (url) => {\n      return this.doRequest({ url: url, method: 'GET' });\n    });\n\n    return this.q.all(requests);\n  }\n\n  responseParse(responses) {\n    let deferred = this.q.defer();\n\n    const timeSeriesDataArray = _.map(responses, (response) => {\n      const timeSeriesData = _.map(response.data, (target_res) => {\n        const timesiries = _.map( target_res.data, (datapoint) => {\n          return [\n            datapoint.val,\n            datapoint.secs * 1000 + _.floor(datapoint.nanos / 1000000)\n          ];\n        });\n        const timeseries = { target: target_res.meta['name'], datapoints: timesiries };\n        return timeseries;\n      });\n      return timeSeriesData;\n    });\n\n    deferred.resolve(_.flatten(timeSeriesDataArray));\n    return deferred.promise;\n  }\n\n  setAlias(timeseriesData, target) {\n    let deferred = this.q.defer();\n\n    if (!target.alias) {\n      deferred.resolve(timeseriesData);\n      return deferred.promise;\n    }\n\n    let pattern;\n    if (target.aliasPattern) {\n      pattern = new RegExp(target.aliasPattern, '');\n    }\n\n    let newTimeseriesData = _.map(timeseriesData, (timeseries) => {\n      if (pattern) {\n        const alias = timeseries.target.replace(pattern, target.alias);\n        return { target: alias, datapoints: timeseries.datapoints };\n      }\n\n      return { target: target.alias, datapoints: timeseries.datapoints };\n    });\n\n    deferred.resolve(newTimeseriesData);\n    return deferred.promise;\n  }\n\n  applyFunctions(timeseriesData, target) {\n    if (target.functions === undefined) {\n      return this.q.when(timeseriesData);\n    }\n\n    return this.bindFunctionDefs(target.functions, ['Transform', 'Filter Series'], timeseriesData);\n  }\n\n  testDatasource() {\n    return { status: 'success', message: 'Data source is working', title: 'Success' };\n    //return this.doRequest({\n    //  url: this.url_mgmt + '/bpl/getAppliancesInCluster',\n    //  method: 'GET',\n    //}).then(response => {\n    //  if (response.status === 200) {\n    //    return { status: 'success', message: 'Data source is working', title: 'Success' };\n    //  }\n    //});\n  }\n\n  pvNamesFindQuery(query) {\n    if (!query) {\n      let deferred = this.q.defer();\n      deferred.resolve([]);\n      return deferred.promise;\n    }\n\n    const url = `${this.url}/bpl/getMatchingPVs?limit=100&regex=${encodeURIComponent(query)}`;\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then( (res) => {\n      return res.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    const replacedQuery = this.templateSrv.replace(query, null, 'regex');\n    const parsedQuery = this.parseTargetQuery(replacedQuery);\n\n    const pvnamesPromise = _.map(parsedQuery, (targetQuery) => {\n      return this.pvNamesFindQuery(targetQuery);\n    });\n\n    return this.q.all(pvnamesPromise).then((pvnamesArray) => {\n      const pvnames = _.slice(_.uniq(_.flatten(pvnamesArray)), 0, 100);\n      return _.map(pvnames, (pvname) => {\n        return { text: pvname };\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(options);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets and undefined targets\n    options.targets = _.filter(options.targets, (target) => {\n      return (target.target !== '' && typeof target.target !== 'undefined');\n    });\n\n    if (options.targets.length <= 0) {\n      return options;\n    }\n\n    const from = new Date(options.range.from);\n    const to = new Date(options.range.to);\n    const rangeMsec = to.getTime() - from.getTime();\n    const intervalSec =  _.floor(rangeMsec / ( options.maxDataPoints * 1000));\n\n    let interval = '';\n    if ( intervalSec >= 1 ) {\n      interval = String(intervalSec);\n    }\n\n    const targets = _.map(options.targets, (target) => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: target.alias,\n        operator: target.operator,\n        from: from,\n        to: to,\n        interval: interval,\n        functions: target.functions,\n        regex: target.regex,\n        aliasPattern: target.aliasPattern\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  parseTargetQuery(query) {\n    /*\n     * ex) query = ABC(1|2|3)EFG(5|6)\n     *     then\n     *     splitQueries = ['ABC','(1|2|3'), 'EFG', '(5|6)']\n     *     queries = [\n     *     ABC1EFG5, ABC1EFG6, ABC2EFG6,\n     *     ABC2EFG6, ABC3EFG5, ABC3EFG6\n     *     ]\n     */\n    const splitQueries = _.split(query, /(\\(.*?\\))/);\n    let queries = [''];\n\n    _.forEach(splitQueries, (splitQuery, i) => {\n      // Fixed string like 'ABC'\n      if (i % 2 === 0) {\n        queries = _.map(queries, (query) => {\n          return `${query}${splitQuery}`;\n        });\n        return;\n      }\n\n      // Regex OR string like '(1|2|3)'\n      const orElems = _.split(_.trim(splitQuery, '()'), '|');\n\n      const newQueries = _.map(queries, (query) => {\n        return _.map(orElems, (orElem) => {\n          return `${query}${orElem}`;\n        });\n      });\n      queries = _.flatten(newQueries);\n    });\n\n    return queries;\n  }\n\n  bindFunctionDefs(functionDefs, categories, data) {\n    const allCategorisedFuncDefs = aafunc.getCategories();\n\n    const requiredCategoryFuncNames = _.reduce(categories, (funcNames, category) => {\n      return _.concat(funcNames, _.map(allCategorisedFuncDefs[category], 'name'));\n    }, []);\n\n    const applyFuncDefs = _.filter(functionDefs, (func) => {\n      return _.includes(requiredCategoryFuncNames, func.def.name);\n    });\n\n    const promises = _.reduce(applyFuncDefs, (prevPromise, func) => {\n      return prevPromise.then((res) => {\n        const funcInstance = aafunc.createFuncInstance(func.def, func.params);\n        const bindedFunc = funcInstance.bindFunction(dataProcessor.aaFunctions);\n\n        // Transform function\n        if (func.def.category === 'Transform') {\n          const tsData = _.map(res, (timeseries) => {\n            timeseries.datapoints = bindedFunc(timeseries.datapoints);\n            return timeseries;\n          });\n          return this.q.when(tsData);\n        }\n\n        // Any other function\n        return this.q.when(bindedFunc(res));\n      });\n    }, this.q.when(data));\n\n    return promises;\n  }\n}\n"],"file":"datasource.js"}