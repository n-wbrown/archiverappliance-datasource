{"version":3,"sources":["../src/datasource.js"],"names":["_","ArchiverapplianceDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","jsonData","url_mgmt","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","buildUrl","method","then","responseParse","res","pvs","map","target","from","Date","range","to","join","toISOString","response","timesiries","td","d","val","secs","Math","floor","nanos","meta","setAlias","aliases","forEach","alias","undefined","status","message","title","str","replace","s","toString","split","interpolated","mapToTextValue","result","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class ArchiverapplianceDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    const jsonData = instanceSettings.jsonData || {};\n\n    this.url_mgmt = instanceSettings.jsonData.url_mgmt;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.buildUrl(query, options),\n      data: query,\n      method: 'GET'\n    }).then(res => this.responseParse(res, query));\n  }\n\n  buildUrl(query, options) {\n    const pvs = query.targets.map( target => {\n        return (\"pv=\" + target.target);\n    });\n\n    const from = new Date(options.range.from);\n    const to = new Date(options.range.to);\n    const url = this.url + '/data/getDataForPVs.json?' + pvs.join('&') + '&from=' + from.toISOString() + '&to=' + to.toISOString();\n\n    return url;\n  }\n\n  responseParse(response, query) {\n    let data = response.data.map( td => {\n      let timesiries = td.data.map( d => {\n          return [d.val, d.secs*1000+Math.floor(d.nanos/1000000)];\n      });\n      let d = {\"target\": td.meta[\"name\"], \"datapoints\": timesiries};\n      return d;\n    });\n\n    this.setAlias(data, query.targets);\n\n    return {data: data};\n  }\n\n  setAlias(data, targets) {\n      let aliases = {};\n\n      targets.forEach( target => {\n        if( target.alias !== undefined && target.alias !== \"\" ) {\n          aliases[target.target] = target.alias;\n        }\n      });\n\n      data.forEach( d => {\n        if( aliases[d.target] !== undefined ) {\n          d.target = aliases[d.target];\n        }\n      });\n  }\n\n  testDatasource() {\n    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //return this.doRequest({\n    //  url: this.url_mgmt + '/bpl/getAppliancesInCluster',\n    //  method: 'GET',\n    //}).then(response => {\n    //  if (response.status === 200) {\n    //    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //  }\n    //});\n  }\n\n  metricFindQuery(query) {\n    var str = this.templateSrv.replace(query, null, 'regex');\n\n    if (str) {\n      var s = str.toString().split('=');\n      var target = (s[1] || '');\n      var name = (s[0] || '');\n    }\n    else{\n      var target = '';\n      var name = '';\n    }\n\n    var interpolated = {\n        target: target\n    };\n\n    interpolated.name = name;\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(options);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets and undefined targets\n    options.targets = _.filter(options.targets, target => {\n      return (target.target !== '' && typeof target.target !== 'undefined');\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: target.alias,\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}