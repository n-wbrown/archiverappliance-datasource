{"version":3,"sources":["../src/datasource.js"],"names":["ArchiverapplianceDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","operatorList","options","query","buildQueryParameters","targets","_","filter","t","hide","when","data","targetProcesses","map","target","targetProcess","all","then","timeseriesDataArray","postProcess","buildUrls","urls","doMultiUrlRequests","responses","responseParse","timeseriesData","setAlias","applyFunctions","flatten","targetQueries","parseTargetQuery","pvnamesPromise","targetQuery","regex","pvNamesFindQuery","pvnamesArray","pvnames","uniq","flattenDeep","deferred","defer","pvname","buildUrl","operator","interval","from","to","e","reject","resolve","promise","pv","join","includes","undefined","Error","toISOString","requests","doRequest","method","timeSeriesDataArray","response","timeSeriesData","target_res","timesiries","datapoint","val","secs","floor","nanos","timeseries","meta","datapoints","alias","pattern","aliasPattern","RegExp","newTimeseriesData","replace","functions","transformFunctions","bindFunctionDefs","sequence","status","message","title","str","encodeURIComponent","res","text","result","datasourceRequest","Date","range","rangeMsec","getTime","intervalSec","maxDataPoints","String","scopedVars","refId","splitQueries","split","queries","forEach","splitQuery","i","orElems","trim","newQueries","orElem","functionDefs","category","aggregationFunctions","aafunc","getCategories","aggFuncDefs","func","def","funcInstance","createFuncInstance","params","bindFunction","dataProcessor","aaFunctions","funcsArray","call"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport dataProcessor from './dataProcessor';\nimport * as aafunc from './aafunc';\n\nexport class ArchiverapplianceDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (\n        typeof instanceSettings.basicAuth === 'string'\n        && instanceSettings.basicAuth.length > 0\n    ) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    this.operatorList = [\n        'firstSample', 'lastSample', 'firstFill', 'lastFill', 'mean', 'min',\n        'max', 'count', 'ncount', 'nth', 'median', 'std', 'jitter',\n        'ignoreflyers', 'flyers', 'variance',\n        'popvariance', 'kurtosis', 'skewness', 'raw'\n    ];\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = _.filter(query.targets, t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    const targetProcesses = _.map(query.targets, (target) => {\n      return this.targetProcess(target, options);\n    });\n\n   return this.q.all(targetProcesses)\n          .then((timeseriesDataArray) => this.postProcess(timeseriesDataArray));\n  }\n\n  targetProcess(target, options) {\n    return (\n      this.buildUrls(target, options)\n      .then(urls           => this.doMultiUrlRequests(urls))\n      .then(responses      => this.responseParse(responses))\n      .then(timeseriesData => this.setAlias(timeseriesData, target))\n      .then(timeseriesData => this.applyFunctions(timeseriesData, target))\n    );\n  }\n\n  postProcess(timeseriesDataArray) {\n    const timeseriesData = _.flatten(timeseriesDataArray);\n\n    return { data: timeseriesData };\n  }\n\n  buildUrls(target) {\n    const targetQueries = this.parseTargetQuery(target.target);\n\n    const pvnamesPromise = _.map(targetQueries, (targetQuery) => {\n      if (target.regex) {\n        return this.pvNamesFindQuery(targetQuery);\n      }\n\n      return this.q.when([targetQuery]);\n    });\n\n    return this.q.all(pvnamesPromise)\n          .then((pvnamesArray) => {\n            const pvnames = _.uniq(_.flattenDeep(pvnamesArray));\n            let deferred = this.q.defer();\n            let urls;\n\n            try {\n              urls = _.map( pvnames, (pvname) => {\n                return this.buildUrl(\n                  pvname,\n                  target.operator,\n                  target.interval,\n                  target.from,\n                  target.to\n                );\n              });\n            } catch (e) {\n              deferred.reject(e);\n            }\n\n            deferred.resolve(urls);\n            return deferred.promise;\n          });\n  }\n\n  buildUrl(pvname, operator, interval, from, to) {\n    let pv = ''\n    if (operator === 'raw' || interval === '') {\n      pv = ['pv=', pvname].join('');\n    } else if (_.includes(['', undefined], operator)) {\n      // Default Operator\n      pv = ['pv=mean_', interval, '(', pvname, ')'].join('');\n    } else if (_.includes(this.operatorList, operator) ) {\n      pv = ['pv=', operator, '_', interval, '(', pvname, ')'].join('');\n    } else {\n      throw new Error('Data Processing Operator is invalid.');\n    }\n\n    const url = [\n      this.url,\n      '/data/getData.json?',\n      pv,\n      '&from=',\n      from.toISOString(),\n      '&to=',\n      to.toISOString()\n    ].join('');\n\n    return url;\n  }\n\n  doMultiUrlRequests(urls) {\n    const requests = _.map(urls, (url) => {\n      return this.doRequest({ url: url, method: 'GET' });\n    });\n\n    return this.q.all(requests);\n  }\n\n  responseParse(responses) {\n    let deferred = this.q.defer();\n\n    const timeSeriesDataArray = _.map(responses, (response) => {\n      const timeSeriesData = _.map(response.data, (target_res) => {\n        const timesiries = _.map( target_res.data, (datapoint) => {\n          return [\n            datapoint.val,\n            datapoint.secs * 1000 + _.floor(datapoint.nanos / 1000000)\n          ];\n        });\n        const timeseries = { target: target_res.meta['name'], datapoints: timesiries };\n        return timeseries;\n      });\n      return timeSeriesData;\n    });\n\n    deferred.resolve(_.flatten(timeSeriesDataArray));\n    return deferred.promise;\n  }\n\n  setAlias(timeseriesData, target) {\n    let deferred = this.q.defer();\n\n    if (!target.alias) {\n      deferred.resolve(timeseriesData);\n      return deferred.promise;\n    }\n\n    let pattern;\n    if (target.aliasPattern) {\n      pattern = new RegExp(target.aliasPattern, '');\n    }\n\n    let newTimeseriesData = _.map(timeseriesData, (timeseries) => {\n      if (pattern) {\n        const alias = timeseries.target.replace(pattern, target.alias);\n        return { target: alias, datapoints: timeseries.datapoints };\n      }\n\n      return { target: target.alias, datapoints: timeseries.datapoints };\n    });\n\n    deferred.resolve(newTimeseriesData);\n    return deferred.promise;\n  }\n\n  applyFunctions(timeseriesData, target) {\n    let deferred = this.q.defer();\n\n    if (target.functions === undefined) {\n      deferred.resolve(timeseriesData);\n      return deferred.promise;\n    }\n\n    // Apply transformation functions\n    const transformFunctions = bindFunctionDefs(target.functions, 'Transform');\n    timeseriesData = _.map(timeseriesData, (timeseries) => {\n      timeseries.datapoints = sequence(transformFunctions)(timeseries.datapoints);\n      return timeseries;\n    });\n\n    deferred.resolve(timeseriesData);\n    return deferred.promise;\n  }\n\n  testDatasource() {\n    return { status: 'success', message: 'Data source is working', title: 'Success' };\n    //return this.doRequest({\n    //  url: this.url_mgmt + '/bpl/getAppliancesInCluster',\n    //  method: 'GET',\n    //}).then(response => {\n    //  if (response.status === 200) {\n    //    return { status: 'success', message: 'Data source is working', title: 'Success' };\n    //  }\n    //});\n  }\n\n  pvNamesFindQuery(query) {\n    const str = this.templateSrv.replace(query, null, 'regex');\n\n    if (!str) {\n      let deferred = this.q.defer();\n      deferred.resolve([]);\n      return deferred.promise;\n    }\n\n    const url = [\n      this.url,\n      '/bpl/getMatchingPVs?limit=100&regex=',\n      encodeURIComponent(str)\n    ].join('');\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then( (res) => {\n      return res.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    return this.pvNamesFindQuery(query).then((pvnames) => {\n      return _.map(pvnames, (pvname) => {\n        return { text: pvname };\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(options);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets and undefined targets\n    options.targets = _.filter(options.targets, (target) => {\n      return (target.target !== '' && typeof target.target !== 'undefined');\n    });\n\n    if (options.targets.length <= 0) {\n      return options;\n    }\n\n    const from = new Date(options.range.from);\n    const to = new Date(options.range.to);\n    const rangeMsec = to.getTime() - from.getTime();\n    const intervalSec =  _.floor(rangeMsec / ( options.maxDataPoints * 1000));\n\n    let interval = '';\n    if ( intervalSec >= 1 ) {\n      interval = String(intervalSec);\n    }\n\n    const targets = _.map(options.targets, (target) => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: target.alias,\n        operator: target.operator,\n        from: from,\n        to: to,\n        interval: interval,\n        functions: target.functions,\n        regex: target.regex,\n        aliasPattern: target.aliasPattern\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  parseTargetQuery(query) {\n    /*\n     * ex) query = ABC(1|2|3)EFG(5|6)\n     *     then\n     *     splitQueries = ['ABC','(1|2|3'), 'EFG', '(5|6)']\n     *     queries = [\n     *     ABC1EFG5, ABC1EFG6, ABC2EFG6,\n     *     ABC2EFG6, ABC3EFG5, ABC3EFG6\n     *     ]\n     */\n    const splitQueries = _.split(query, /(\\(.*?\\))/);\n    let queries = [''];\n\n    _.forEach(splitQueries, (splitQuery, i) => {\n      // Fixed string like 'ABC'\n      if (i % 2 === 0) {\n        queries = _.map(queries, (query) => {\n          return [query, splitQuery].join('');\n        });\n        return;\n      }\n\n      // Regex OR string like '(1|2|3)'\n      const orElems = _.split(_.trim(splitQuery, '()'), '|');\n\n      const newQueries = _.map(queries, (query) => {\n        return _.map(orElems, (orElem) => {\n          return [query, orElem].join('');\n        });\n      });\n      queries = _.flatten(newQueries);\n    });\n\n    return queries;\n  }\n}\n\nfunction bindFunctionDefs(functionDefs, category) {\n  const aggregationFunctions = _.map(aafunc.getCategories()[category], 'name');\n  const aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.includes(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, func => {\n    let funcInstance = aafunc.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(dataProcessor.aaFunctions);\n  });\n}\n\nfunction sequence(funcsArray) {\n  return function (result) {\n    for (let i = 0; i < funcsArray.length; i++) {\n      result = funcsArray[i].call(this, result);\n    }\n    return result;\n  };\n}\n"],"file":"datasource.js"}