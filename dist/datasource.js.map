{"version":3,"sources":["../src/datasource.js"],"names":["ArchiverapplianceDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","Authorization","operatorList","options","query","buildQueryParameters","targets","_","filter","t","hide","when","data","targetProcesses","map","target","targetProcess","all","then","timeseriesDataArray","postProcess","buildUrls","urls","doMultiUrlRequests","responses","responseParse","timeseriesData","setAlias","applyFunctions","flatten","targetQueries","parseTargetQuery","pvnamesPromise","targetQuery","regex","pvNamesFindQuery","pvnamesArray","pvnames","slice","uniq","deferred","defer","pvname","buildUrl","operator","interval","from","to","e","reject","resolve","promise","pv","includes","undefined","Error","toISOString","requests","doRequest","method","timeSeriesDataArray","response","timeSeriesData","targetRes","timesiries","datapoint","val","secs","floor","nanos","timeseries","meta","datapoints","alias","pattern","aliasPattern","RegExp","newTimeseriesData","replace","functions","bindFunctionDefs","status","message","title","encodeURIComponent","res","replacedQuery","parsedQuery","text","newOptions","result","datasourceRequest","Date","range","rangeMsec","getTime","intervalSec","maxDataPoints","String","scopedVars","refId","splitQueries","split","queries","forEach","splitQuery","i","orElems","trim","newQueries","orElem","functionDefs","categories","allCategorisedFuncDefs","aafunc","getCategories","requiredCategoryFuncNames","reduce","funcNames","category","concat","applyFuncDefs","func","def","promises","prevPromise","funcInstance","createFuncInstance","params","bindedFunc","bindFunction","dataProcessor","aaFunctions","tsData"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport dataProcessor from './dataProcessor';\nimport * as aafunc from './aafunc';\n\nexport class ArchiverapplianceDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = { 'Content-Type': 'application/json' };\n    if (\n      typeof instanceSettings.basicAuth === 'string'\n      && instanceSettings.basicAuth.length > 0\n    ) {\n      this.headers.Authorization = instanceSettings.basicAuth;\n    }\n\n    this.operatorList = [\n      'firstSample', 'lastSample', 'firstFill', 'lastFill', 'mean', 'min',\n      'max', 'count', 'ncount', 'nth', 'median', 'std', 'jitter',\n      'ignoreflyers', 'flyers', 'variance',\n      'popvariance', 'kurtosis', 'skewness', 'raw',\n    ];\n  }\n\n  query(options) {\n    const query = this.buildQueryParameters(options);\n    query.targets = _.filter(query.targets, (t) => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    const targetProcesses = _.map(query.targets, (target) => (\n      this.targetProcess(target)\n    ));\n\n    return (\n      this.q.all(targetProcesses)\n        .then((timeseriesDataArray) => this.postProcess(timeseriesDataArray))\n    );\n  }\n\n  targetProcess(target) {\n    return (\n      this.buildUrls(target)\n        .then((urls) => this.doMultiUrlRequests(urls))\n        .then((responses) => this.responseParse(responses))\n        .then((timeseriesData) => this.setAlias(timeseriesData, target))\n        .then((timeseriesData) => this.applyFunctions(timeseriesData, target))\n    );\n  }\n\n  postProcess(timeseriesDataArray) {\n    const timeseriesData = _.flatten(timeseriesDataArray);\n\n    return { data: timeseriesData };\n  }\n\n  buildUrls(target) {\n    const targetQueries = this.parseTargetQuery(target.target);\n\n    const pvnamesPromise = _.map(targetQueries, (targetQuery) => {\n      if (target.regex) {\n        return this.pvNamesFindQuery(targetQuery);\n      }\n\n      return this.q.when([targetQuery]);\n    });\n\n    return this.q.all(pvnamesPromise)\n      .then((pvnamesArray) => {\n        const pvnames = _.slice(_.uniq(_.flatten(pvnamesArray)), 0, 100);\n        const deferred = this.q.defer();\n        let urls;\n\n        try {\n          urls = _.map(pvnames, (pvname) => (\n            this.buildUrl(\n              pvname,\n              target.operator,\n              target.interval,\n              target.from,\n              target.to,\n            )\n          ));\n        } catch (e) {\n          deferred.reject(e);\n        }\n\n        deferred.resolve(urls);\n        return deferred.promise;\n      });\n  }\n\n  buildUrl(pvname, operator, interval, from, to) {\n    let pv = '';\n    if (operator === 'raw' || interval === '') {\n      pv = `pv=${pvname}`;\n    } else if (_.includes(['', undefined], operator)) {\n      // Default Operator\n      pv = `pv=mean_${interval}(${pvname})`;\n    } else if (_.includes(this.operatorList, operator)) {\n      pv = `pv=${operator}_${interval}(${pvname})`;\n    } else {\n      throw new Error('Data Processing Operator is invalid.');\n    }\n\n    const url = `${this.url}/data/getData.json?${pv}&from=${from.toISOString()}&to=${to.toISOString()}`;\n\n    return url;\n  }\n\n  doMultiUrlRequests(urls) {\n    const requests = _.map(urls, (url) => (\n      this.doRequest({ url, method: 'GET' })\n    ));\n\n    return this.q.all(requests);\n  }\n\n  responseParse(responses) {\n    const deferred = this.q.defer();\n\n    const timeSeriesDataArray = _.map(responses, (response) => {\n      const timeSeriesData = _.map(response.data, (targetRes) => {\n        const timesiries = _.map(targetRes.data, (datapoint) => (\n          [\n            datapoint.val,\n            datapoint.secs * 1000 + _.floor(datapoint.nanos / 1000000),\n          ]\n        ));\n        const timeseries = { target: targetRes.meta.name, datapoints: timesiries };\n        return timeseries;\n      });\n      return timeSeriesData;\n    });\n\n    deferred.resolve(_.flatten(timeSeriesDataArray));\n    return deferred.promise;\n  }\n\n  setAlias(timeseriesData, target) {\n    const deferred = this.q.defer();\n\n    if (!target.alias) {\n      deferred.resolve(timeseriesData);\n      return deferred.promise;\n    }\n\n    let pattern;\n    if (target.aliasPattern) {\n      pattern = new RegExp(target.aliasPattern, '');\n    }\n\n    const newTimeseriesData = _.map(timeseriesData, (timeseries) => {\n      if (pattern) {\n        const alias = timeseries.target.replace(pattern, target.alias);\n        return { target: alias, datapoints: timeseries.datapoints };\n      }\n\n      return { target: target.alias, datapoints: timeseries.datapoints };\n    });\n\n    deferred.resolve(newTimeseriesData);\n    return deferred.promise;\n  }\n\n  applyFunctions(timeseriesData, target) {\n    if (target.functions === undefined) {\n      return this.q.when(timeseriesData);\n    }\n\n    return this.bindFunctionDefs(target.functions, ['Transform', 'Filter Series'], timeseriesData);\n  }\n\n  testDatasource() {\n    return { status: 'success', message: 'Data source is working', title: 'Success' };\n  }\n\n  pvNamesFindQuery(query) {\n    if (!query) {\n      return this.q.when([]);\n    }\n\n    const url = `${this.url}/bpl/getMatchingPVs?limit=100&regex=${encodeURIComponent(query)}`;\n\n    return this.doRequest({\n      url,\n      method: 'GET',\n    }).then((res) => res.data);\n  }\n\n  metricFindQuery(query) {\n    const replacedQuery = this.templateSrv.replace(query, null, 'regex');\n    const parsedQuery = this.parseTargetQuery(replacedQuery);\n\n    const pvnamesPromise = _.map(parsedQuery, (targetQuery) => (\n      this.pvNamesFindQuery(targetQuery)\n    ));\n\n    return this.q.all(pvnamesPromise).then((pvnamesArray) => {\n      const pvnames = _.slice(_.uniq(_.flatten(pvnamesArray)), 0, 100);\n      return _.map(pvnames, (pvname) => ({ text: pvname }));\n    });\n  }\n\n  doRequest(options) {\n    const newOptions = { ...options };\n    newOptions.withCredentials = this.withCredentials;\n    newOptions.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(newOptions);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    const query = { ...options };\n\n    // remove placeholder targets and undefined targets\n    query.targets = _.filter(query.targets, (target) => (\n      target.target !== '' && typeof target.target !== 'undefined'\n    ));\n\n    if (query.targets.length <= 0) {\n      return query;\n    }\n\n    const from = new Date(query.range.from);\n    const to = new Date(query.range.to);\n    const rangeMsec = to.getTime() - from.getTime();\n    const intervalSec = _.floor(rangeMsec / (query.maxDataPoints * 1000));\n\n    const interval = (intervalSec >= 1) ? String(intervalSec) : '';\n\n    const targets = _.map(query.targets, (target) => (\n      {\n        target: this.templateSrv.replace(target.target, query.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: target.alias,\n        operator: target.operator,\n        functions: target.functions,\n        regex: target.regex,\n        aliasPattern: target.aliasPattern,\n        from,\n        to,\n        interval,\n      }\n    ));\n\n    query.targets = targets;\n\n    return query;\n  }\n\n  parseTargetQuery(targetQuery) {\n    /*\n     * ex) targetQuery = ABC(1|2|3)EFG(5|6)\n     *     then\n     *     splitQueries = ['ABC','(1|2|3'), 'EFG', '(5|6)']\n     *     queries = [\n     *     ABC1EFG5, ABC1EFG6, ABC2EFG6,\n     *     ABC2EFG6, ABC3EFG5, ABC3EFG6\n     *     ]\n     */\n    const splitQueries = _.split(targetQuery, /(\\(.*?\\))/);\n    let queries = [''];\n\n    _.forEach(splitQueries, (splitQuery, i) => {\n      // Fixed string like 'ABC'\n      if (i % 2 === 0) {\n        queries = _.map(queries, (query) => `${query}${splitQuery}`);\n        return;\n      }\n\n      // Regex OR string like '(1|2|3)'\n      const orElems = _.split(_.trim(splitQuery, '()'), '|');\n\n      const newQueries = _.map(queries, (query) => (\n        _.map(orElems, (orElem) => `${query}${orElem}`)\n      ));\n      queries = _.flatten(newQueries);\n    });\n\n    return queries;\n  }\n\n  bindFunctionDefs(functionDefs, categories, data) {\n    const allCategorisedFuncDefs = aafunc.getCategories();\n\n    const requiredCategoryFuncNames = _.reduce(categories, (funcNames, category) => (\n      _.concat(funcNames, _.map(allCategorisedFuncDefs[category], 'name'))\n    ), []);\n\n    const applyFuncDefs = _.filter(functionDefs, (func) => (\n      _.includes(requiredCategoryFuncNames, func.def.name)\n    ));\n\n    const promises = _.reduce(applyFuncDefs, (prevPromise, func) => (\n      prevPromise.then((res) => {\n        const funcInstance = aafunc.createFuncInstance(func.def, func.params);\n        const bindedFunc = funcInstance.bindFunction(dataProcessor.aaFunctions);\n\n        // Transform function\n        if (func.def.category === 'Transform') {\n          const tsData = _.map(res, (timeseries) => {\n            timeseries.datapoints = bindedFunc(timeseries.datapoints);\n            return timeseries;\n          });\n          return this.q.when(tsData);\n        }\n\n        // Any other function\n        return this.q.when(bindedFunc(res));\n      })\n    ), this.q.when(data));\n\n    return promises;\n  }\n}\n"],"file":"datasource.js"}