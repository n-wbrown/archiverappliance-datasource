{"version":3,"sources":["../src/datasource.js"],"names":["ArchiverapplianceDatasource","instanceSettings","backendSrv","templateSrv","type","url","name","withCredentials","headers","basicAuth","length","Authorization","operatorList","options","query","buildQueryParameters","targets","_","filter","t","hide","Promise","resolve","data","targetProcesses","map","target","targetProcess","all","then","timeseriesDataArray","postProcess","buildUrls","urls","doMultiUrlRequests","responses","responseParse","timeseriesData","setAlias","applyFunctions","flatten","targetQueries","parseTargetQuery","maxNumPVs","pvnamesPromise","targetQuery","regex","pvNamesFindQuery","binInterval","interval","pvnamesArray","reject","pvnames","slice","uniq","pvname","buildUrl","operator","from","to","e","pv","includes","undefined","Error","encodeURIComponent","toISOString","requests","doRequest","method","timeSeriesDataArray","response","timeSeriesData","targetRes","timesiries","datapoint","val","secs","floor","nanos","timeseries","meta","datapoints","alias","pattern","aliasPattern","RegExp","newTimeseriesData","replace","functions","bindFunctionDefs","status","message","title","maxPvs","res","replacedQuery","split","pvQuery","paramsQuery","parsedQuery","limitNum","params","URLSearchParams","has","limit","parseInt","get","Number","isInteger","text","newOptions","result","datasourceRequest","Date","range","rangeMsec","getTime","intervalSec","maxDataPoints","String","func","newFunc","param","scopedVars","refId","getOptions","splitQueries","queries","forEach","splitQuery","i","orElems","trim","newQueries","orElem","functionDefs","categories","allCategorisedFuncDefs","aafunc","getCategories","requiredCategoryFuncNames","reduce","funcNames","category","concat","applyFuncDefs","def","promises","prevPromise","funcInstance","createFuncInstance","bindedFunc","bindFunction","dataProcessor","aaFunctions","optionsFuncNames","Options","optionMap"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport dataProcessor from './dataProcessor';\nimport * as aafunc from './aafunc';\n\nexport class ArchiverapplianceDatasource {\n  constructor(instanceSettings, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = { 'Content-Type': 'application/json' };\n    if (\n      typeof instanceSettings.basicAuth === 'string'\n      && instanceSettings.basicAuth.length > 0\n    ) {\n      this.headers.Authorization = instanceSettings.basicAuth;\n    }\n\n    this.operatorList = [\n      'firstSample', 'lastSample', 'firstFill', 'lastFill', 'mean', 'min',\n      'max', 'count', 'ncount', 'nth', 'median', 'std', 'jitter',\n      'ignoreflyers', 'flyers', 'variance',\n      'popvariance', 'kurtosis', 'skewness', 'raw',\n    ];\n  }\n\n  query(options) {\n    const query = this.buildQueryParameters(options);\n    query.targets = _.filter(query.targets, (t) => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const targetProcesses = _.map(query.targets, (target) => (\n      this.targetProcess(target)\n    ));\n\n    return (\n      Promise.all(targetProcesses)\n        .then((timeseriesDataArray) => this.postProcess(timeseriesDataArray))\n    );\n  }\n\n  targetProcess(target) {\n    return (\n      this.buildUrls(target)\n        .then((urls) => this.doMultiUrlRequests(urls))\n        .then((responses) => this.responseParse(responses))\n        .then((timeseriesData) => this.setAlias(timeseriesData, target))\n        .then((timeseriesData) => this.applyFunctions(timeseriesData, target))\n    );\n  }\n\n  postProcess(timeseriesDataArray) {\n    const timeseriesData = _.flatten(timeseriesDataArray);\n\n    return { data: timeseriesData };\n  }\n\n  buildUrls(target) {\n    const targetQueries = this.parseTargetQuery(target.target);\n\n    let maxNumPVs = 100;\n    if (target.options.maxNumPVs) {\n      maxNumPVs = target.options.maxNumPVs;\n    }\n\n    const pvnamesPromise = _.map(targetQueries, (targetQuery) => {\n      if (target.regex) {\n        return this.pvNamesFindQuery(targetQuery, maxNumPVs);\n      }\n\n      return Promise.resolve([targetQuery]);\n    });\n\n    let binInterval = target.interval;\n    if (target.options.binInterval) {\n      binInterval = target.options.binInterval;\n    }\n\n    return Promise.all(pvnamesPromise)\n      .then((pvnamesArray) => (\n        new Promise((resolve, reject) => {\n          const pvnames = _.slice(_.uniq(_.flatten(pvnamesArray)), 0, maxNumPVs);\n          let urls;\n\n          try {\n            urls = _.map(pvnames, (pvname) => (\n              this.buildUrl(\n                pvname,\n                target.operator,\n                binInterval,\n                target.from,\n                target.to,\n              )\n            ));\n          } catch (e) {\n            reject(e);\n          }\n\n          resolve(urls);\n        })\n      ));\n  }\n\n  buildUrl(pvname, operator, interval, from, to) {\n    let pv = '';\n    if (operator === 'raw' || interval === '') {\n      pv = `${pvname}`;\n    } else if (_.includes(['', undefined], operator)) {\n      // Default Operator\n      pv = `mean_${interval}(${pvname})`;\n    } else if (_.includes(this.operatorList, operator)) {\n      pv = `${operator}_${interval}(${pvname})`;\n    } else {\n      throw new Error('Data Processing Operator is invalid.');\n    }\n\n    const url = `${this.url}/data/getData.json?pv=${encodeURIComponent(pv)}&from=${from.toISOString()}&to=${to.toISOString()}`;\n\n    return url;\n  }\n\n  doMultiUrlRequests(urls) {\n    const requests = _.map(urls, (url) => (\n      this.doRequest({ url, method: 'GET' })\n    ));\n\n    return Promise.all(requests);\n  }\n\n  responseParse(responses) {\n    const timeSeriesDataArray = _.map(responses, (response) => {\n      const timeSeriesData = _.map(response.data, (targetRes) => {\n        const timesiries = _.map(targetRes.data, (datapoint) => (\n          [\n            datapoint.val,\n            datapoint.secs * 1000 + _.floor(datapoint.nanos / 1000000),\n          ]\n        ));\n        const timeseries = { target: targetRes.meta.name, datapoints: timesiries };\n        return timeseries;\n      });\n      return timeSeriesData;\n    });\n\n    return Promise.resolve(_.flatten(timeSeriesDataArray));\n  }\n\n  setAlias(timeseriesData, target) {\n    if (!target.alias) {\n      return Promise.resolve(timeseriesData);\n    }\n\n    let pattern;\n    if (target.aliasPattern) {\n      pattern = new RegExp(target.aliasPattern, '');\n    }\n\n    const newTimeseriesData = _.map(timeseriesData, (timeseries) => {\n      if (pattern) {\n        const alias = timeseries.target.replace(pattern, target.alias);\n        return { target: alias, datapoints: timeseries.datapoints };\n      }\n\n      return { target: target.alias, datapoints: timeseries.datapoints };\n    });\n\n    return Promise.resolve(newTimeseriesData);\n  }\n\n  applyFunctions(timeseriesData, target) {\n    if (target.functions === undefined) {\n      return Promise.resolve(timeseriesData);\n    }\n\n    return this.bindFunctionDefs(target.functions, ['Transform', 'Filter Series'], timeseriesData);\n  }\n\n  testDatasource() {\n    return { status: 'success', message: 'Data source is working', title: 'Success' };\n  }\n\n  pvNamesFindQuery(query, maxPvs) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const url = `${this.url}/bpl/getMatchingPVs?limit=${maxPvs}&regex=${encodeURIComponent(query)}`;\n\n    return this.doRequest({\n      url,\n      method: 'GET',\n    }).then((res) => res.data);\n  }\n\n  metricFindQuery(query) {\n    /*\n     * query format:\n     * ex1) PV:NAME:.*\n     * ex2) PV:NAME:.*?limit=10\n     */\n    const replacedQuery = this.templateSrv.replace(query, null, 'regex');\n    const [pvQuery, paramsQuery] = replacedQuery.split('?', 2);\n    const parsedQuery = this.parseTargetQuery(pvQuery);\n\n    // Parse query parameters\n    let limitNum = 100;\n    if (paramsQuery) {\n      const params = new URLSearchParams(paramsQuery);\n      if (params.has('limit')) {\n        const limit = parseInt(params.get('limit'), 10);\n        limitNum = Number.isInteger(limit) ? limit : 100;\n      }\n    }\n\n    const pvnamesPromise = _.map(parsedQuery, (targetQuery) => (\n      this.pvNamesFindQuery(targetQuery, limitNum)\n    ));\n\n    return Promise.all(pvnamesPromise).then((pvnamesArray) => {\n      const pvnames = _.slice(_.uniq(_.flatten(pvnamesArray)), 0, limitNum);\n      return _.map(pvnames, (pvname) => ({ text: pvname }));\n    });\n  }\n\n  doRequest(options) {\n    const newOptions = { ...options };\n    newOptions.withCredentials = this.withCredentials;\n    newOptions.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(newOptions);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    const query = { ...options };\n\n    // remove placeholder targets and undefined targets\n    query.targets = _.filter(query.targets, (target) => (\n      target.target !== '' && typeof target.target !== 'undefined'\n    ));\n\n    if (query.targets.length <= 0) {\n      return query;\n    }\n\n    const from = new Date(query.range.from);\n    const to = new Date(query.range.to);\n    const rangeMsec = to.getTime() - from.getTime();\n    const intervalSec = _.floor(rangeMsec / (query.maxDataPoints * 1000));\n\n    const interval = (intervalSec >= 1) ? String(intervalSec) : '';\n\n    const targets = _.map(query.targets, (target) => {\n      // Replace parameters with variables for each functions\n      const functions = _.map(target.functions, (func) => {\n        const newFunc = func;\n        newFunc.params = _.map(newFunc.params, (param) => (\n          this.templateSrv.replace(param, query.scopedVars, 'regex')\n        ));\n        return newFunc;\n      });\n\n      return {\n        target: this.templateSrv.replace(target.target, query.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: this.templateSrv.replace(target.alias, query.scopedVars, 'regex'),\n        operator: this.templateSrv.replace(target.operator, query.scopedVars, 'regex'),\n        functions,\n        regex: target.regex,\n        aliasPattern: target.aliasPattern,\n        options: this.getOptions(target.functions),\n        from,\n        to,\n        interval,\n      };\n    });\n\n    query.targets = targets;\n\n    return query;\n  }\n\n  parseTargetQuery(targetQuery) {\n    /*\n     * ex) targetQuery = ABC(1|2|3)EFG(5|6)\n     *     then\n     *     splitQueries = ['ABC','(1|2|3'), 'EFG', '(5|6)']\n     *     queries = [\n     *     ABC1EFG5, ABC1EFG6, ABC2EFG6,\n     *     ABC2EFG6, ABC3EFG5, ABC3EFG6\n     *     ]\n     */\n    const splitQueries = _.split(targetQuery, /(\\(.*?\\))/);\n    let queries = [''];\n\n    _.forEach(splitQueries, (splitQuery, i) => {\n      // Fixed string like 'ABC'\n      if (i % 2 === 0) {\n        queries = _.map(queries, (query) => `${query}${splitQuery}`);\n        return;\n      }\n\n      // Regex OR string like '(1|2|3)'\n      const orElems = _.split(_.trim(splitQuery, '()'), '|');\n\n      const newQueries = _.map(queries, (query) => (\n        _.map(orElems, (orElem) => `${query}${orElem}`)\n      ));\n      queries = _.flatten(newQueries);\n    });\n\n    return queries;\n  }\n\n  bindFunctionDefs(functionDefs, categories, data) {\n    const allCategorisedFuncDefs = aafunc.getCategories();\n\n    const requiredCategoryFuncNames = _.reduce(categories, (funcNames, category) => (\n      _.concat(funcNames, _.map(allCategorisedFuncDefs[category], 'name'))\n    ), []);\n\n    const applyFuncDefs = _.filter(functionDefs, (func) => (\n      _.includes(requiredCategoryFuncNames, func.def.name)\n    ));\n\n    const promises = _.reduce(applyFuncDefs, (prevPromise, func) => (\n      prevPromise.then((res) => {\n        const funcInstance = aafunc.createFuncInstance(func.def, func.params);\n        const bindedFunc = funcInstance.bindFunction(dataProcessor.aaFunctions);\n\n        return Promise.resolve(bindedFunc(res));\n      })\n    ), Promise.resolve(data));\n\n    return promises;\n  }\n\n  getOptions(functionDefs) {\n    const allCategorisedFuncDefs = aafunc.getCategories();\n    const optionsFuncNames = _.map(allCategorisedFuncDefs.Options, 'name');\n\n    const applyFuncDefs = _.filter(functionDefs, (func) => (\n      _.includes(optionsFuncNames, func.def.name)\n    ));\n\n    const options = _.reduce(applyFuncDefs, (optionMap, func) => {\n      [optionMap[func.def.name]] = func.params;\n      return optionMap;\n    }, {});\n\n    return options;\n  }\n}\n"],"file":"datasource.js"}