{"version":3,"sources":["../src/datasource.js"],"names":["ArchiverapplianceDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","jsonData","url_mgmt","operatorList","options","query","buildQueryParameters","targets","filter","t","hide","when","data","map","target","targetProcess","all","then","postProcess","buildUrl","doRequest","method","res","responseParse","setAlias","d","reduce","result","concat","deferred","defer","pv","operator","interval","undefined","includes","reject","Error","from","toISOString","to","resolve","promise","response","target_data","target_res","timesiries","datapoint","val","secs","Math","floor","nanos","meta","forEach","alias","status","message","title","str","replace","s","toString","split","interpolated","mapToTextValue","_","i","text","value","isObject","datasourceRequest","Date","range","range_msec","getTime","interval_sec","maxDataPoints","String","scopedVars","refId"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\n\nexport class ArchiverapplianceDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    const jsonData = instanceSettings.jsonData || {};\n\n    this.url_mgmt = instanceSettings.jsonData.url_mgmt;\n    this.operatorList = [\"firstSample\", \"lastSample\", \"firstFill\", \"lastFill\", \"mean\", \"min\", \"max\",\n        \"count\", \"ncount\", \"nth\", \"median\", \"std\", \"jitter\", \"ignoreflyers\", \"flyers\", \"variance\",\n        \"popvariance\", \"kurtosis\", \"skewness\", \"raw\"];\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const targets = query.targets.map( target => {\n      return this.targetProcess(target, options);\n    });\n\n   return this.q.all(targets).then( data => this.postProcess(data) );\n  }\n\n  targetProcess(target, options) {\n      return (\n          this.buildUrl(target, options)\n          .then( url => this.doRequest({ url: url, method: 'GET' }) )\n          .then( res => this.responseParse(res) )\n          .then( data => this.setAlias(data, target) )\n      );\n  }\n\n  postProcess(data) {\n    const d = data.reduce( (result, d) => {\n      result = result.concat(d);\n      return result;\n    }, []);\n\n    return {data: d};\n  }\n\n  buildUrl(target) {\n    let deferred = this.q.defer();\n\n    let pv = \"\"\n    if ( target.operator === \"raw\" || target.interval === \"\") {\n      pv = \"pv=\" + target.target;\n    } else if ( [\"\", undefined].includes(target.operator) ) {\n      // Default Operator\n      pv = \"pv=mean_\" + target.interval + \"(\" + target.target + \")\";\n    } else if ( this.operatorList.includes(target.operator) ) {\n      pv = \"pv=\" + target.operator + \"_\" + target.interval + \"(\" + target.target + \")\";\n    } else {\n      deferred.reject(Error(\"Data Processing Operator is invalid.\"));\n    }\n\n    const url = this.url + '/data/getData.json?' + pv + '&from=' + target.from.toISOString() + '&to=' + target.to.toISOString();\n\n    deferred.resolve(url);\n    return deferred.promise;\n  }\n\n  responseParse(response) {\n    let deferred = this.q.defer();\n\n    const target_data = response.data.map( target_res => {\n      const timesiries = target_res.data.map( datapoint => {\n          return [datapoint.val, datapoint.secs*1000+Math.floor(datapoint.nanos/1000000)];\n      });\n      const target_data = {\"target\": target_res.meta[\"name\"], \"datapoints\": timesiries};\n      return target_data;\n    });\n\n    deferred.resolve(target_data);\n    return deferred.promise;\n  }\n\n  setAlias(data, target) {\n    let deferred = this.q.defer();\n\n    data.forEach( d => {\n      if( target.alias !== undefined && target.alias !== \"\" ) {\n        d.target = target.alias;\n      }\n    });\n\n    deferred.resolve(data);\n    return deferred.promise;\n  }\n\n  testDatasource() {\n    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //return this.doRequest({\n    //  url: this.url_mgmt + '/bpl/getAppliancesInCluster',\n    //  method: 'GET',\n    //}).then(response => {\n    //  if (response.status === 200) {\n    //    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //  }\n    //});\n  }\n\n  metricFindQuery(query) {\n    var str = this.templateSrv.replace(query, null, 'regex');\n\n    if (str) {\n      var s = str.toString().split('=');\n      var target = (s[1] || '');\n      var name = (s[0] || '');\n    }\n    else{\n      var target = '';\n      var name = '';\n    }\n\n    var interpolated = {\n        target: target\n    };\n\n    interpolated.name = name;\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    const result = this.backendSrv.datasourceRequest(options);\n    return result;\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets and undefined targets\n    options.targets = _.filter(options.targets, target => {\n      return (target.target !== '' && typeof target.target !== 'undefined');\n    });\n\n    if (options.targets.length <= 0) {\n      return options;\n    }\n\n    const from = new Date(options.range.from);\n    const to = new Date(options.range.to);\n    const range_msec = to.getTime() - from.getTime();\n    const interval_sec =  Math.floor(range_msec / ( options.maxDataPoints * 1000));\n\n    let interval = \"\";\n    if ( interval_sec >= 1 ) {\n        interval = String(interval_sec);\n    }\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        alias: target.alias,\n        operator: target.operator,\n        from: from,\n        to: to,\n        interval: interval\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"],"file":"datasource.js"}